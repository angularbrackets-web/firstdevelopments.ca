// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Message",
    columns: [
      { name: "Name", type: "string", notNull: true, defaultValue: "test" },
      { name: "Email", type: "email" },
      { name: "Phone", type: "string" },
      { name: "Message", type: "text", notNull: true, defaultValue: "test" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Message = InferredTypes["Message"];
export type MessageRecord = Message & XataRecord;

export type DatabaseSchema = {
  Message: MessageRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://firstgroupdevelopments-s-workspace-q8rqgk.us-west-2.xata.sh/db/firstdevelopments",
  enableBrowser:true
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient({
    apiKey: import.meta.env.XATA_API_KEY,
    branch: import.meta.env.XATA_BRANCH
  });
  return instance;
};
